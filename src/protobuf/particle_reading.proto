package gmapping_structs;

option optimize_for = SPEED;

message Sensordata{
    repeated Particle_pose_weights pose_weights = 1;
    repeated double plainreading = 2 [packed=true];
}

message Particle_pose_weights{
    required double weightSum = 1;
    required double weight = 2;
    required OrientedPoint pose = 3;
}

message indexMessage{
    required  int32 id = 1;
    repeated  uint32 resampleindexes = 2 [packed=true];
}


message StartPackage {

    required ScanMatcherSettings settings = 1 ;

    repeated double plainreading = 2 [packed=true];

    //gridslamprocessor
    required OrientedPoint startPose = 3 ;
    required double minimumScore = 4;
    required double xmin = 5;
    required double ymin = 6;
    required double xmax = 7;
    required double ymax = 8;
    required double delta = 9;
}

message ScanMatcherSettings{

        //scanmatcher
        required bool activeAreaComputed = 1;
        required double angularOdometryReliability = 2;
        required double enlargeStep = 3;
        required double freeCellRatio = 4;
        required double fullnessThreshold = 5;
        required double gaussianSigma = 6;
        required bool   generateMap = 7;
        required uint32 initialBeamSkip = 8;
        required int32 kernelSize = 9;
        required double lasamplerange = 10;
        required double lasamplestep = 11;
        repeated double laserAngles = 12  [packed=true];
        required uint32 laserBeams = 13;
        required double laserMaxRange = 14;
        required OrientedPoint laserPose = 15;
        required double likelihoodSigma = 16;
        required uint32 likelihoodSkip = 17;
        required double linearOdometryReliability = 18;
        required double llsamplerange = 19;
        required double llsamplestep = 20;
        required double optAngularDelta = 21;
        required double optLinearDelta = 22;
        required uint32 optRecursiveIterations=23;
        required double usableRange = 24;
}

message WorkResponse{
        required int32 id = 1;
        repeated IntPoint m_activeArea = 2; //pointset

        optional double weight = 3;
        optional double weightSum = 4;
        optional OrientedPoint pose = 5;

        //if resize
        optional double minx = 6;
        optional double miny = 7;
        optional double maxx = 8;
        optional double maxy = 9;
}

message InitialMaps{
    repeated Particle particles= 1;
    repeated int32 ids = 2 [packed=true];
}

message Particle{
        required uint32 id = 1;
	required double weightSum = 2;
	required double weight = 3;

	required ScanMatcherMap smap = 4;
	required OrientedPoint pose = 5;
}

message ScanMatcherMap {
	required double m_center_x = 1;
	required double m_center_y = 2;
	required double m_worldSizeX = 3;
	required double m_worldSizeY = 4;
	required double m_delta = 5;
	required int32  m_mapSizeX = 6;
	required int32  m_mapSizeY = 7;
	required int32  m_sizeX2 = 8;
	required int32  m_sizeY2 = 9;
	required HierarchicalArray2D m_storage = 10;
}

message OrientedPoint{
	required double x = 1;
	required double y = 2;
	required double theta = 3;
}


message PointAccumulator{
	required float x = 1;
	required float y = 2;
	required int32 n = 3;
	required int32 visits = 4;
}

message Array2D{
	required int32 m_xsize = 1;
	required int32 m_ysize = 2;
	repeated innerType x = 4;

	message innerType{
		repeated PointAccumulator y = 1;
	}
}

message Autoptr{
        optional Array2D data = 1;
}

message HierarchicalArray2D{
	required int32 m_patchMagnitude = 1;
	required int32 m_patchSize = 2;
        repeated innerType m_cells_x = 3;
	required int32 m_xsize = 4;
	required int32 m_ysize = 5;
	repeated IntPoint m_activeArea = 6; //pointset

        message innerType{
                repeated Autoptr m_cells_y = 1;
        }
}

message IntPoint{
	required int32 x = 1;
	required int32 y = 2;
}

message resampleMessage{
    required  uint32 resamplecounter = 1;
    repeated  uint32 resampleindexes = 2 [packed=true];
    optional  bool finish = 3 ;
}

message Particles{
    repeated Particle particles = 1;
    optional uint32 id = 2;
}



