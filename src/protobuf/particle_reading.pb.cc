// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "particle_reading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gmapping_structs {

namespace {

const ::google::protobuf::Descriptor* Sensordata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sensordata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Particle_pose_weights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Particle_pose_weights_reflection_ = NULL;
const ::google::protobuf::Descriptor* indexMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  indexMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanMatcherSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanMatcherSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitialMaps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitialMaps_reflection_ = NULL;
const ::google::protobuf::Descriptor* Particle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Particle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanMatcherMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanMatcherMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrientedPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrientedPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointAccumulator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointAccumulator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2D_innerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2D_innerType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Autoptr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Autoptr_reflection_ = NULL;
const ::google::protobuf::Descriptor* HierarchicalArray2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HierarchicalArray2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* HierarchicalArray2D_innerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HierarchicalArray2D_innerType_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* resampleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  resampleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Particles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_2fparticle_5freading_2eproto() {
  protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf/particle_reading.proto");
  GOOGLE_CHECK(file != NULL);
  Sensordata_descriptor_ = file->message_type(0);
  static const int Sensordata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensordata, pose_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensordata, plainreading_),
  };
  Sensordata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sensordata_descriptor_,
      Sensordata::default_instance_,
      Sensordata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensordata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensordata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sensordata));
  Particle_pose_weights_descriptor_ = file->message_type(1);
  static const int Particle_pose_weights_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle_pose_weights, weightsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle_pose_weights, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle_pose_weights, pose_),
  };
  Particle_pose_weights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Particle_pose_weights_descriptor_,
      Particle_pose_weights::default_instance_,
      Particle_pose_weights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle_pose_weights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle_pose_weights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Particle_pose_weights));
  indexMessage_descriptor_ = file->message_type(2);
  static const int indexMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexMessage, resampleindexes_),
  };
  indexMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      indexMessage_descriptor_,
      indexMessage::default_instance_,
      indexMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(indexMessage));
  StartPackage_descriptor_ = file->message_type(3);
  static const int StartPackage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, plainreading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, startpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, minimumscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, ymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, xmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, ymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, delta_),
  };
  StartPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartPackage_descriptor_,
      StartPackage::default_instance_,
      StartPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartPackage));
  ScanMatcherSettings_descriptor_ = file->message_type(4);
  static const int ScanMatcherSettings_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, activeareacomputed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, angularodometryreliability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, enlargestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, freecellratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, fullnessthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, gaussiansigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, generatemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, initialbeamskip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, kernelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, lasamplerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, lasamplestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, laserangles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, laserbeams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, lasermaxrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, laserpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, likelihoodsigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, likelihoodskip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, linearodometryreliability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, llsamplerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, llsamplestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, optangulardelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, optlineardelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, optrecursiveiterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, usablerange_),
  };
  ScanMatcherSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanMatcherSettings_descriptor_,
      ScanMatcherSettings::default_instance_,
      ScanMatcherSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanMatcherSettings));
  WorkResponse_descriptor_ = file->message_type(5);
  static const int WorkResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, m_activearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, weightsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, minx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, miny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, maxx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, maxy_),
  };
  WorkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkResponse_descriptor_,
      WorkResponse::default_instance_,
      WorkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkResponse));
  InitialMaps_descriptor_ = file->message_type(6);
  static const int InitialMaps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMaps, particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMaps, ids_),
  };
  InitialMaps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitialMaps_descriptor_,
      InitialMaps::default_instance_,
      InitialMaps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMaps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMaps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitialMaps));
  Particle_descriptor_ = file->message_type(7);
  static const int Particle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, weightsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, smap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, pose_),
  };
  Particle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Particle_descriptor_,
      Particle::default_instance_,
      Particle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Particle));
  ScanMatcherMap_descriptor_ = file->message_type(8);
  static const int ScanMatcherMap_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_center_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_center_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_worldsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_worldsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_mapsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_mapsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_sizex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_sizey2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, m_storage_),
  };
  ScanMatcherMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanMatcherMap_descriptor_,
      ScanMatcherMap::default_instance_,
      ScanMatcherMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMatcherMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanMatcherMap));
  OrientedPoint_descriptor_ = file->message_type(9);
  static const int OrientedPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientedPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientedPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientedPoint, theta_),
  };
  OrientedPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrientedPoint_descriptor_,
      OrientedPoint::default_instance_,
      OrientedPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientedPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientedPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrientedPoint));
  PointAccumulator_descriptor_ = file->message_type(10);
  static const int PointAccumulator_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAccumulator, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAccumulator, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAccumulator, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAccumulator, visits_),
  };
  PointAccumulator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointAccumulator_descriptor_,
      PointAccumulator::default_instance_,
      PointAccumulator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAccumulator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAccumulator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointAccumulator));
  Array2D_descriptor_ = file->message_type(11);
  static const int Array2D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D, m_xsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D, m_ysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D, x_),
  };
  Array2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2D_descriptor_,
      Array2D::default_instance_,
      Array2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2D));
  Array2D_innerType_descriptor_ = Array2D_descriptor_->nested_type(0);
  static const int Array2D_innerType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D_innerType, y_),
  };
  Array2D_innerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2D_innerType_descriptor_,
      Array2D_innerType::default_instance_,
      Array2D_innerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D_innerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2D_innerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2D_innerType));
  Autoptr_descriptor_ = file->message_type(12);
  static const int Autoptr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Autoptr, data_),
  };
  Autoptr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Autoptr_descriptor_,
      Autoptr::default_instance_,
      Autoptr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Autoptr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Autoptr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Autoptr));
  HierarchicalArray2D_descriptor_ = file->message_type(13);
  static const int HierarchicalArray2D_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, m_patchmagnitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, m_patchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, m_cells_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, m_xsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, m_ysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, m_activearea_),
  };
  HierarchicalArray2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HierarchicalArray2D_descriptor_,
      HierarchicalArray2D::default_instance_,
      HierarchicalArray2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HierarchicalArray2D));
  HierarchicalArray2D_innerType_descriptor_ = HierarchicalArray2D_descriptor_->nested_type(0);
  static const int HierarchicalArray2D_innerType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D_innerType, m_cells_y_),
  };
  HierarchicalArray2D_innerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HierarchicalArray2D_innerType_descriptor_,
      HierarchicalArray2D_innerType::default_instance_,
      HierarchicalArray2D_innerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D_innerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchicalArray2D_innerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HierarchicalArray2D_innerType));
  IntPoint_descriptor_ = file->message_type(14);
  static const int IntPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPoint, y_),
  };
  IntPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntPoint_descriptor_,
      IntPoint::default_instance_,
      IntPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntPoint));
  resampleMessage_descriptor_ = file->message_type(15);
  static const int resampleMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resampleMessage, resamplecounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resampleMessage, resampleindexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resampleMessage, finish_),
  };
  resampleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      resampleMessage_descriptor_,
      resampleMessage::default_instance_,
      resampleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resampleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resampleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(resampleMessage));
  Particles_descriptor_ = file->message_type(16);
  static const int Particles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particles, particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particles, id_),
  };
  Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Particles_descriptor_,
      Particles::default_instance_,
      Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Particles));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_2fparticle_5freading_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sensordata_descriptor_, &Sensordata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Particle_pose_weights_descriptor_, &Particle_pose_weights::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    indexMessage_descriptor_, &indexMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartPackage_descriptor_, &StartPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanMatcherSettings_descriptor_, &ScanMatcherSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkResponse_descriptor_, &WorkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitialMaps_descriptor_, &InitialMaps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Particle_descriptor_, &Particle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanMatcherMap_descriptor_, &ScanMatcherMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrientedPoint_descriptor_, &OrientedPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointAccumulator_descriptor_, &PointAccumulator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2D_descriptor_, &Array2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2D_innerType_descriptor_, &Array2D_innerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Autoptr_descriptor_, &Autoptr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HierarchicalArray2D_descriptor_, &HierarchicalArray2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HierarchicalArray2D_innerType_descriptor_, &HierarchicalArray2D_innerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntPoint_descriptor_, &IntPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    resampleMessage_descriptor_, &resampleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Particles_descriptor_, &Particles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_2fparticle_5freading_2eproto() {
  delete Sensordata::default_instance_;
  delete Sensordata_reflection_;
  delete Particle_pose_weights::default_instance_;
  delete Particle_pose_weights_reflection_;
  delete indexMessage::default_instance_;
  delete indexMessage_reflection_;
  delete StartPackage::default_instance_;
  delete StartPackage_reflection_;
  delete ScanMatcherSettings::default_instance_;
  delete ScanMatcherSettings_reflection_;
  delete WorkResponse::default_instance_;
  delete WorkResponse_reflection_;
  delete InitialMaps::default_instance_;
  delete InitialMaps_reflection_;
  delete Particle::default_instance_;
  delete Particle_reflection_;
  delete ScanMatcherMap::default_instance_;
  delete ScanMatcherMap_reflection_;
  delete OrientedPoint::default_instance_;
  delete OrientedPoint_reflection_;
  delete PointAccumulator::default_instance_;
  delete PointAccumulator_reflection_;
  delete Array2D::default_instance_;
  delete Array2D_reflection_;
  delete Array2D_innerType::default_instance_;
  delete Array2D_innerType_reflection_;
  delete Autoptr::default_instance_;
  delete Autoptr_reflection_;
  delete HierarchicalArray2D::default_instance_;
  delete HierarchicalArray2D_reflection_;
  delete HierarchicalArray2D_innerType::default_instance_;
  delete HierarchicalArray2D_innerType_reflection_;
  delete IntPoint::default_instance_;
  delete IntPoint_reflection_;
  delete resampleMessage::default_instance_;
  delete resampleMessage_reflection_;
  delete Particles::default_instance_;
  delete Particles_reflection_;
}

void protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037protobuf/particle_reading.proto\022\020gmapp"
    "ing_structs\"e\n\nSensordata\022=\n\014pose_weight"
    "s\030\001 \003(\0132\'.gmapping_structs.Particle_pose"
    "_weights\022\030\n\014plainreading\030\002 \003(\001B\002\020\001\"i\n\025Pa"
    "rticle_pose_weights\022\021\n\tweightSum\030\001 \002(\001\022\016"
    "\n\006weight\030\002 \002(\001\022-\n\004pose\030\003 \002(\0132\037.gmapping_"
    "structs.OrientedPoint\"7\n\014indexMessage\022\n\n"
    "\002id\030\001 \002(\005\022\033\n\017resampleindexes\030\002 \003(\rB\002\020\001\"\362"
    "\001\n\014StartPackage\0227\n\010settings\030\001 \002(\0132%.gmap"
    "ping_structs.ScanMatcherSettings\022\030\n\014plai"
    "nreading\030\002 \003(\001B\002\020\001\0222\n\tstartPose\030\003 \002(\0132\037."
    "gmapping_structs.OrientedPoint\022\024\n\014minimu"
    "mScore\030\004 \002(\001\022\014\n\004xmin\030\005 \002(\001\022\014\n\004ymin\030\006 \002(\001"
    "\022\014\n\004xmax\030\007 \002(\001\022\014\n\004ymax\030\010 \002(\001\022\r\n\005delta\030\t "
    "\002(\001\"\201\005\n\023ScanMatcherSettings\022\032\n\022activeAre"
    "aComputed\030\001 \002(\010\022\"\n\032angularOdometryReliab"
    "ility\030\002 \002(\001\022\023\n\013enlargeStep\030\003 \002(\001\022\025\n\rfree"
    "CellRatio\030\004 \002(\001\022\031\n\021fullnessThreshold\030\005 \002"
    "(\001\022\025\n\rgaussianSigma\030\006 \002(\001\022\023\n\013generateMap"
    "\030\007 \002(\010\022\027\n\017initialBeamSkip\030\010 \002(\r\022\022\n\nkerne"
    "lSize\030\t \002(\005\022\025\n\rlasamplerange\030\n \002(\001\022\024\n\014la"
    "samplestep\030\013 \002(\001\022\027\n\013laserAngles\030\014 \003(\001B\002\020"
    "\001\022\022\n\nlaserBeams\030\r \002(\r\022\025\n\rlaserMaxRange\030\016"
    " \002(\001\0222\n\tlaserPose\030\017 \002(\0132\037.gmapping_struc"
    "ts.OrientedPoint\022\027\n\017likelihoodSigma\030\020 \002("
    "\001\022\026\n\016likelihoodSkip\030\021 \002(\r\022!\n\031linearOdome"
    "tryReliability\030\022 \002(\001\022\025\n\rllsamplerange\030\023 "
    "\002(\001\022\024\n\014llsamplestep\030\024 \002(\001\022\027\n\017optAngularD"
    "elta\030\025 \002(\001\022\026\n\016optLinearDelta\030\026 \002(\001\022\036\n\026op"
    "tRecursiveIterations\030\027 \002(\r\022\023\n\013usableRang"
    "e\030\030 \002(\001\"\326\001\n\014WorkResponse\022\n\n\002id\030\001 \002(\005\0220\n\014"
    "m_activeArea\030\002 \003(\0132\032.gmapping_structs.In"
    "tPoint\022\016\n\006weight\030\003 \001(\001\022\021\n\tweightSum\030\004 \001("
    "\001\022-\n\004pose\030\005 \001(\0132\037.gmapping_structs.Orien"
    "tedPoint\022\014\n\004minx\030\006 \001(\001\022\014\n\004miny\030\007 \001(\001\022\014\n\004"
    "maxx\030\010 \001(\001\022\014\n\004maxy\030\t \001(\001\"M\n\013InitialMaps\022"
    "-\n\tparticles\030\001 \003(\0132\032.gmapping_structs.Pa"
    "rticle\022\017\n\003ids\030\002 \003(\005B\002\020\001\"\230\001\n\010Particle\022\n\n\002"
    "id\030\001 \002(\r\022\021\n\tweightSum\030\002 \002(\001\022\016\n\006weight\030\003 "
    "\002(\001\022.\n\004smap\030\004 \002(\0132 .gmapping_structs.Sca"
    "nMatcherMap\022-\n\004pose\030\005 \002(\0132\037.gmapping_str"
    "ucts.OrientedPoint\"\373\001\n\016ScanMatcherMap\022\022\n"
    "\nm_center_x\030\001 \002(\001\022\022\n\nm_center_y\030\002 \002(\001\022\024\n"
    "\014m_worldSizeX\030\003 \002(\001\022\024\n\014m_worldSizeY\030\004 \002("
    "\001\022\017\n\007m_delta\030\005 \002(\001\022\022\n\nm_mapSizeX\030\006 \002(\005\022\022"
    "\n\nm_mapSizeY\030\007 \002(\005\022\020\n\010m_sizeX2\030\010 \002(\005\022\020\n\010"
    "m_sizeY2\030\t \002(\005\0228\n\tm_storage\030\n \002(\0132%.gmap"
    "ping_structs.HierarchicalArray2D\"4\n\rOrie"
    "ntedPoint\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005theta"
    "\030\003 \002(\001\"C\n\020PointAccumulator\022\t\n\001x\030\001 \002(\002\022\t\n"
    "\001y\030\002 \002(\002\022\t\n\001n\030\003 \002(\005\022\016\n\006visits\030\004 \002(\005\"\227\001\n\007"
    "Array2D\022\017\n\007m_xsize\030\001 \002(\005\022\017\n\007m_ysize\030\002 \002("
    "\005\022.\n\001x\030\004 \003(\0132#.gmapping_structs.Array2D."
    "innerType\032:\n\tinnerType\022-\n\001y\030\001 \003(\0132\".gmap"
    "ping_structs.PointAccumulator\"2\n\007Autoptr"
    "\022\'\n\004data\030\001 \001(\0132\031.gmapping_structs.Array2"
    "D\"\227\002\n\023HierarchicalArray2D\022\030\n\020m_patchMagn"
    "itude\030\001 \002(\005\022\023\n\013m_patchSize\030\002 \002(\005\022B\n\tm_ce"
    "lls_x\030\003 \003(\0132/.gmapping_structs.Hierarchi"
    "calArray2D.innerType\022\017\n\007m_xsize\030\004 \002(\005\022\017\n"
    "\007m_ysize\030\005 \002(\005\0220\n\014m_activeArea\030\006 \003(\0132\032.g"
    "mapping_structs.IntPoint\0329\n\tinnerType\022,\n"
    "\tm_cells_y\030\001 \003(\0132\031.gmapping_structs.Auto"
    "ptr\" \n\010IntPoint\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"W\n"
    "\017resampleMessage\022\027\n\017resamplecounter\030\001 \002("
    "\r\022\033\n\017resampleindexes\030\002 \003(\rB\002\020\001\022\016\n\006finish"
    "\030\003 \001(\010\"F\n\tParticles\022-\n\tparticles\030\001 \003(\0132\032"
    ".gmapping_structs.Particle\022\n\n\002id\030\002 \001(\rB\002"
    "H\001", 2722);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf/particle_reading.proto", &protobuf_RegisterTypes);
  Sensordata::default_instance_ = new Sensordata();
  Particle_pose_weights::default_instance_ = new Particle_pose_weights();
  indexMessage::default_instance_ = new indexMessage();
  StartPackage::default_instance_ = new StartPackage();
  ScanMatcherSettings::default_instance_ = new ScanMatcherSettings();
  WorkResponse::default_instance_ = new WorkResponse();
  InitialMaps::default_instance_ = new InitialMaps();
  Particle::default_instance_ = new Particle();
  ScanMatcherMap::default_instance_ = new ScanMatcherMap();
  OrientedPoint::default_instance_ = new OrientedPoint();
  PointAccumulator::default_instance_ = new PointAccumulator();
  Array2D::default_instance_ = new Array2D();
  Array2D_innerType::default_instance_ = new Array2D_innerType();
  Autoptr::default_instance_ = new Autoptr();
  HierarchicalArray2D::default_instance_ = new HierarchicalArray2D();
  HierarchicalArray2D_innerType::default_instance_ = new HierarchicalArray2D_innerType();
  IntPoint::default_instance_ = new IntPoint();
  resampleMessage::default_instance_ = new resampleMessage();
  Particles::default_instance_ = new Particles();
  Sensordata::default_instance_->InitAsDefaultInstance();
  Particle_pose_weights::default_instance_->InitAsDefaultInstance();
  indexMessage::default_instance_->InitAsDefaultInstance();
  StartPackage::default_instance_->InitAsDefaultInstance();
  ScanMatcherSettings::default_instance_->InitAsDefaultInstance();
  WorkResponse::default_instance_->InitAsDefaultInstance();
  InitialMaps::default_instance_->InitAsDefaultInstance();
  Particle::default_instance_->InitAsDefaultInstance();
  ScanMatcherMap::default_instance_->InitAsDefaultInstance();
  OrientedPoint::default_instance_->InitAsDefaultInstance();
  PointAccumulator::default_instance_->InitAsDefaultInstance();
  Array2D::default_instance_->InitAsDefaultInstance();
  Array2D_innerType::default_instance_->InitAsDefaultInstance();
  Autoptr::default_instance_->InitAsDefaultInstance();
  HierarchicalArray2D::default_instance_->InitAsDefaultInstance();
  HierarchicalArray2D_innerType::default_instance_->InitAsDefaultInstance();
  IntPoint::default_instance_->InitAsDefaultInstance();
  resampleMessage::default_instance_->InitAsDefaultInstance();
  Particles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_2fparticle_5freading_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_2fparticle_5freading_2eproto {
  StaticDescriptorInitializer_protobuf_2fparticle_5freading_2eproto() {
    protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();
  }
} static_descriptor_initializer_protobuf_2fparticle_5freading_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Sensordata::kPoseWeightsFieldNumber;
const int Sensordata::kPlainreadingFieldNumber;
#endif  // !_MSC_VER

Sensordata::Sensordata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sensordata::InitAsDefaultInstance() {
}

Sensordata::Sensordata(const Sensordata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sensordata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sensordata::~Sensordata() {
  SharedDtor();
}

void Sensordata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sensordata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensordata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sensordata_descriptor_;
}

const Sensordata& Sensordata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Sensordata* Sensordata::default_instance_ = NULL;

Sensordata* Sensordata::New() const {
  return new Sensordata;
}

void Sensordata::Clear() {
  pose_weights_.Clear();
  plainreading_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sensordata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gmapping_structs.Particle_pose_weights pose_weights = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pose_weights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pose_weights;
        if (input->ExpectTag(18)) goto parse_plainreading;
        break;
      }
      
      // repeated double plainreading = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plainreading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_plainreading())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_plainreading())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sensordata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gmapping_structs.Particle_pose_weights pose_weights = 1;
  for (int i = 0; i < this->pose_weights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose_weights(i), output);
  }
  
  // repeated double plainreading = 2 [packed = true];
  if (this->plainreading_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_plainreading_cached_byte_size_);
  }
  for (int i = 0; i < this->plainreading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->plainreading(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sensordata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gmapping_structs.Particle_pose_weights pose_weights = 1;
  for (int i = 0; i < this->pose_weights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose_weights(i), target);
  }
  
  // repeated double plainreading = 2 [packed = true];
  if (this->plainreading_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _plainreading_cached_byte_size_, target);
  }
  for (int i = 0; i < this->plainreading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->plainreading(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sensordata::ByteSize() const {
  int total_size = 0;
  
  // repeated .gmapping_structs.Particle_pose_weights pose_weights = 1;
  total_size += 1 * this->pose_weights_size();
  for (int i = 0; i < this->pose_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pose_weights(i));
  }
  
  // repeated double plainreading = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->plainreading_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _plainreading_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensordata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sensordata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sensordata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sensordata::MergeFrom(const Sensordata& from) {
  GOOGLE_CHECK_NE(&from, this);
  pose_weights_.MergeFrom(from.pose_weights_);
  plainreading_.MergeFrom(from.plainreading_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sensordata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensordata::CopyFrom(const Sensordata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensordata::IsInitialized() const {
  
  for (int i = 0; i < pose_weights_size(); i++) {
    if (!this->pose_weights(i).IsInitialized()) return false;
  }
  return true;
}

void Sensordata::Swap(Sensordata* other) {
  if (other != this) {
    pose_weights_.Swap(&other->pose_weights_);
    plainreading_.Swap(&other->plainreading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sensordata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sensordata_descriptor_;
  metadata.reflection = Sensordata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Particle_pose_weights::kWeightSumFieldNumber;
const int Particle_pose_weights::kWeightFieldNumber;
const int Particle_pose_weights::kPoseFieldNumber;
#endif  // !_MSC_VER

Particle_pose_weights::Particle_pose_weights()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Particle_pose_weights::InitAsDefaultInstance() {
  pose_ = const_cast< ::gmapping_structs::OrientedPoint*>(&::gmapping_structs::OrientedPoint::default_instance());
}

Particle_pose_weights::Particle_pose_weights(const Particle_pose_weights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Particle_pose_weights::SharedCtor() {
  _cached_size_ = 0;
  weightsum_ = 0;
  weight_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Particle_pose_weights::~Particle_pose_weights() {
  SharedDtor();
}

void Particle_pose_weights::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Particle_pose_weights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Particle_pose_weights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particle_pose_weights_descriptor_;
}

const Particle_pose_weights& Particle_pose_weights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Particle_pose_weights* Particle_pose_weights::default_instance_ = NULL;

Particle_pose_weights* Particle_pose_weights::New() const {
  return new Particle_pose_weights;
}

void Particle_pose_weights::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weightsum_ = 0;
    weight_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gmapping_structs::OrientedPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Particle_pose_weights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double weightSum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weightsum_)));
          set_has_weightsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_weight;
        break;
      }
      
      // required double weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }
      
      // required .gmapping_structs.OrientedPoint pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Particle_pose_weights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double weightSum = 1;
  if (has_weightsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weightsum(), output);
  }
  
  // required double weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight(), output);
  }
  
  // required .gmapping_structs.OrientedPoint pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Particle_pose_weights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double weightSum = 1;
  if (has_weightsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weightsum(), target);
  }
  
  // required double weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight(), target);
  }
  
  // required .gmapping_structs.OrientedPoint pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Particle_pose_weights::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double weightSum = 1;
    if (has_weightsum()) {
      total_size += 1 + 8;
    }
    
    // required double weight = 2;
    if (has_weight()) {
      total_size += 1 + 8;
    }
    
    // required .gmapping_structs.OrientedPoint pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particle_pose_weights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Particle_pose_weights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Particle_pose_weights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Particle_pose_weights::MergeFrom(const Particle_pose_weights& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weightsum()) {
      set_weightsum(from.weightsum());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_pose()) {
      mutable_pose()->::gmapping_structs::OrientedPoint::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Particle_pose_weights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Particle_pose_weights::CopyFrom(const Particle_pose_weights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle_pose_weights::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Particle_pose_weights::Swap(Particle_pose_weights* other) {
  if (other != this) {
    std::swap(weightsum_, other->weightsum_);
    std::swap(weight_, other->weight_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Particle_pose_weights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Particle_pose_weights_descriptor_;
  metadata.reflection = Particle_pose_weights_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int indexMessage::kIdFieldNumber;
const int indexMessage::kResampleindexesFieldNumber;
#endif  // !_MSC_VER

indexMessage::indexMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void indexMessage::InitAsDefaultInstance() {
}

indexMessage::indexMessage(const indexMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void indexMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indexMessage::~indexMessage() {
  SharedDtor();
}

void indexMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void indexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* indexMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return indexMessage_descriptor_;
}

const indexMessage& indexMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

indexMessage* indexMessage::default_instance_ = NULL;

indexMessage* indexMessage::New() const {
  return new indexMessage;
}

void indexMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  resampleindexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool indexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resampleindexes;
        break;
      }
      
      // repeated uint32 resampleindexes = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resampleindexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_resampleindexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_resampleindexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void indexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated uint32 resampleindexes = 2 [packed = true];
  if (this->resampleindexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_resampleindexes_cached_byte_size_);
  }
  for (int i = 0; i < this->resampleindexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->resampleindexes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* indexMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated uint32 resampleindexes = 2 [packed = true];
  if (this->resampleindexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _resampleindexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->resampleindexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->resampleindexes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int indexMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated uint32 resampleindexes = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->resampleindexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->resampleindexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _resampleindexes_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indexMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const indexMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const indexMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void indexMessage::MergeFrom(const indexMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  resampleindexes_.MergeFrom(from.resampleindexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void indexMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void indexMessage::CopyFrom(const indexMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indexMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void indexMessage::Swap(indexMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    resampleindexes_.Swap(&other->resampleindexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata indexMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = indexMessage_descriptor_;
  metadata.reflection = indexMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartPackage::kSettingsFieldNumber;
const int StartPackage::kPlainreadingFieldNumber;
const int StartPackage::kStartPoseFieldNumber;
const int StartPackage::kMinimumScoreFieldNumber;
const int StartPackage::kXminFieldNumber;
const int StartPackage::kYminFieldNumber;
const int StartPackage::kXmaxFieldNumber;
const int StartPackage::kYmaxFieldNumber;
const int StartPackage::kDeltaFieldNumber;
#endif  // !_MSC_VER

StartPackage::StartPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartPackage::InitAsDefaultInstance() {
  settings_ = const_cast< ::gmapping_structs::ScanMatcherSettings*>(&::gmapping_structs::ScanMatcherSettings::default_instance());
  startpose_ = const_cast< ::gmapping_structs::OrientedPoint*>(&::gmapping_structs::OrientedPoint::default_instance());
}

StartPackage::StartPackage(const StartPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartPackage::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  startpose_ = NULL;
  minimumscore_ = 0;
  xmin_ = 0;
  ymin_ = 0;
  xmax_ = 0;
  ymax_ = 0;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartPackage::~StartPackage() {
  SharedDtor();
}

void StartPackage::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
    delete startpose_;
  }
}

void StartPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartPackage_descriptor_;
}

const StartPackage& StartPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

StartPackage* StartPackage::default_instance_ = NULL;

StartPackage* StartPackage::New() const {
  return new StartPackage;
}

void StartPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_settings()) {
      if (settings_ != NULL) settings_->::gmapping_structs::ScanMatcherSettings::Clear();
    }
    if (has_startpose()) {
      if (startpose_ != NULL) startpose_->::gmapping_structs::OrientedPoint::Clear();
    }
    minimumscore_ = 0;
    xmin_ = 0;
    ymin_ = 0;
    xmax_ = 0;
    ymax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    delta_ = 0;
  }
  plainreading_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gmapping_structs.ScanMatcherSettings settings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plainreading;
        break;
      }
      
      // repeated double plainreading = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plainreading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_plainreading())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_plainreading())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_startPose;
        break;
      }
      
      // required .gmapping_structs.OrientedPoint startPose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startPose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_minimumScore;
        break;
      }
      
      // required double minimumScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minimumScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimumscore_)));
          set_has_minimumscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_xmin;
        break;
      }
      
      // required double xmin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmin_)));
          set_has_xmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ymin;
        break;
      }
      
      // required double ymin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ymin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymin_)));
          set_has_ymin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_xmax;
        break;
      }
      
      // required double xmax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmax_)));
          set_has_xmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ymax;
        break;
      }
      
      // required double ymax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ymax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymax_)));
          set_has_ymax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_delta;
        break;
      }
      
      // required double delta = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gmapping_structs.ScanMatcherSettings settings = 1;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settings(), output);
  }
  
  // repeated double plainreading = 2 [packed = true];
  if (this->plainreading_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_plainreading_cached_byte_size_);
  }
  for (int i = 0; i < this->plainreading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->plainreading(i), output);
  }
  
  // required .gmapping_structs.OrientedPoint startPose = 3;
  if (has_startpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->startpose(), output);
  }
  
  // required double minimumScore = 4;
  if (has_minimumscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minimumscore(), output);
  }
  
  // required double xmin = 5;
  if (has_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xmin(), output);
  }
  
  // required double ymin = 6;
  if (has_ymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ymin(), output);
  }
  
  // required double xmax = 7;
  if (has_xmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->xmax(), output);
  }
  
  // required double ymax = 8;
  if (has_ymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ymax(), output);
  }
  
  // required double delta = 9;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gmapping_structs.ScanMatcherSettings settings = 1;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->settings(), target);
  }
  
  // repeated double plainreading = 2 [packed = true];
  if (this->plainreading_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _plainreading_cached_byte_size_, target);
  }
  for (int i = 0; i < this->plainreading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->plainreading(i), target);
  }
  
  // required .gmapping_structs.OrientedPoint startPose = 3;
  if (has_startpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->startpose(), target);
  }
  
  // required double minimumScore = 4;
  if (has_minimumscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minimumscore(), target);
  }
  
  // required double xmin = 5;
  if (has_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xmin(), target);
  }
  
  // required double ymin = 6;
  if (has_ymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ymin(), target);
  }
  
  // required double xmax = 7;
  if (has_xmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->xmax(), target);
  }
  
  // required double ymax = 8;
  if (has_ymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ymax(), target);
  }
  
  // required double delta = 9;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gmapping_structs.ScanMatcherSettings settings = 1;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }
    
    // required .gmapping_structs.OrientedPoint startPose = 3;
    if (has_startpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpose());
    }
    
    // required double minimumScore = 4;
    if (has_minimumscore()) {
      total_size += 1 + 8;
    }
    
    // required double xmin = 5;
    if (has_xmin()) {
      total_size += 1 + 8;
    }
    
    // required double ymin = 6;
    if (has_ymin()) {
      total_size += 1 + 8;
    }
    
    // required double xmax = 7;
    if (has_xmax()) {
      total_size += 1 + 8;
    }
    
    // required double ymax = 8;
    if (has_ymax()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double delta = 9;
    if (has_delta()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double plainreading = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->plainreading_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _plainreading_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartPackage::MergeFrom(const StartPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  plainreading_.MergeFrom(from.plainreading_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::gmapping_structs::ScanMatcherSettings::MergeFrom(from.settings());
    }
    if (from.has_startpose()) {
      mutable_startpose()->::gmapping_structs::OrientedPoint::MergeFrom(from.startpose());
    }
    if (from.has_minimumscore()) {
      set_minimumscore(from.minimumscore());
    }
    if (from.has_xmin()) {
      set_xmin(from.xmin());
    }
    if (from.has_ymin()) {
      set_ymin(from.ymin());
    }
    if (from.has_xmax()) {
      set_xmax(from.xmax());
    }
    if (from.has_ymax()) {
      set_ymax(from.ymax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPackage::CopyFrom(const StartPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fd) != 0x000001fd) return false;
  
  if (has_settings()) {
    if (!this->settings().IsInitialized()) return false;
  }
  if (has_startpose()) {
    if (!this->startpose().IsInitialized()) return false;
  }
  return true;
}

void StartPackage::Swap(StartPackage* other) {
  if (other != this) {
    std::swap(settings_, other->settings_);
    plainreading_.Swap(&other->plainreading_);
    std::swap(startpose_, other->startpose_);
    std::swap(minimumscore_, other->minimumscore_);
    std::swap(xmin_, other->xmin_);
    std::swap(ymin_, other->ymin_);
    std::swap(xmax_, other->xmax_);
    std::swap(ymax_, other->ymax_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartPackage_descriptor_;
  metadata.reflection = StartPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanMatcherSettings::kActiveAreaComputedFieldNumber;
const int ScanMatcherSettings::kAngularOdometryReliabilityFieldNumber;
const int ScanMatcherSettings::kEnlargeStepFieldNumber;
const int ScanMatcherSettings::kFreeCellRatioFieldNumber;
const int ScanMatcherSettings::kFullnessThresholdFieldNumber;
const int ScanMatcherSettings::kGaussianSigmaFieldNumber;
const int ScanMatcherSettings::kGenerateMapFieldNumber;
const int ScanMatcherSettings::kInitialBeamSkipFieldNumber;
const int ScanMatcherSettings::kKernelSizeFieldNumber;
const int ScanMatcherSettings::kLasamplerangeFieldNumber;
const int ScanMatcherSettings::kLasamplestepFieldNumber;
const int ScanMatcherSettings::kLaserAnglesFieldNumber;
const int ScanMatcherSettings::kLaserBeamsFieldNumber;
const int ScanMatcherSettings::kLaserMaxRangeFieldNumber;
const int ScanMatcherSettings::kLaserPoseFieldNumber;
const int ScanMatcherSettings::kLikelihoodSigmaFieldNumber;
const int ScanMatcherSettings::kLikelihoodSkipFieldNumber;
const int ScanMatcherSettings::kLinearOdometryReliabilityFieldNumber;
const int ScanMatcherSettings::kLlsamplerangeFieldNumber;
const int ScanMatcherSettings::kLlsamplestepFieldNumber;
const int ScanMatcherSettings::kOptAngularDeltaFieldNumber;
const int ScanMatcherSettings::kOptLinearDeltaFieldNumber;
const int ScanMatcherSettings::kOptRecursiveIterationsFieldNumber;
const int ScanMatcherSettings::kUsableRangeFieldNumber;
#endif  // !_MSC_VER

ScanMatcherSettings::ScanMatcherSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanMatcherSettings::InitAsDefaultInstance() {
  laserpose_ = const_cast< ::gmapping_structs::OrientedPoint*>(&::gmapping_structs::OrientedPoint::default_instance());
}

ScanMatcherSettings::ScanMatcherSettings(const ScanMatcherSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanMatcherSettings::SharedCtor() {
  _cached_size_ = 0;
  activeareacomputed_ = false;
  angularodometryreliability_ = 0;
  enlargestep_ = 0;
  freecellratio_ = 0;
  fullnessthreshold_ = 0;
  gaussiansigma_ = 0;
  generatemap_ = false;
  initialbeamskip_ = 0u;
  kernelsize_ = 0;
  lasamplerange_ = 0;
  lasamplestep_ = 0;
  laserbeams_ = 0u;
  lasermaxrange_ = 0;
  laserpose_ = NULL;
  likelihoodsigma_ = 0;
  likelihoodskip_ = 0u;
  linearodometryreliability_ = 0;
  llsamplerange_ = 0;
  llsamplestep_ = 0;
  optangulardelta_ = 0;
  optlineardelta_ = 0;
  optrecursiveiterations_ = 0u;
  usablerange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanMatcherSettings::~ScanMatcherSettings() {
  SharedDtor();
}

void ScanMatcherSettings::SharedDtor() {
  if (this != default_instance_) {
    delete laserpose_;
  }
}

void ScanMatcherSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanMatcherSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanMatcherSettings_descriptor_;
}

const ScanMatcherSettings& ScanMatcherSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

ScanMatcherSettings* ScanMatcherSettings::default_instance_ = NULL;

ScanMatcherSettings* ScanMatcherSettings::New() const {
  return new ScanMatcherSettings;
}

void ScanMatcherSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeareacomputed_ = false;
    angularodometryreliability_ = 0;
    enlargestep_ = 0;
    freecellratio_ = 0;
    fullnessthreshold_ = 0;
    gaussiansigma_ = 0;
    generatemap_ = false;
    initialbeamskip_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kernelsize_ = 0;
    lasamplerange_ = 0;
    lasamplestep_ = 0;
    laserbeams_ = 0u;
    lasermaxrange_ = 0;
    if (has_laserpose()) {
      if (laserpose_ != NULL) laserpose_->::gmapping_structs::OrientedPoint::Clear();
    }
    likelihoodsigma_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    likelihoodskip_ = 0u;
    linearodometryreliability_ = 0;
    llsamplerange_ = 0;
    llsamplestep_ = 0;
    optangulardelta_ = 0;
    optlineardelta_ = 0;
    optrecursiveiterations_ = 0u;
    usablerange_ = 0;
  }
  laserangles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanMatcherSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool activeAreaComputed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activeareacomputed_)));
          set_has_activeareacomputed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_angularOdometryReliability;
        break;
      }
      
      // required double angularOdometryReliability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angularOdometryReliability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angularodometryreliability_)));
          set_has_angularodometryreliability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_enlargeStep;
        break;
      }
      
      // required double enlargeStep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_enlargeStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &enlargestep_)));
          set_has_enlargestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_freeCellRatio;
        break;
      }
      
      // required double freeCellRatio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freeCellRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freecellratio_)));
          set_has_freecellratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_fullnessThreshold;
        break;
      }
      
      // required double fullnessThreshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fullnessThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fullnessthreshold_)));
          set_has_fullnessthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_gaussianSigma;
        break;
      }
      
      // required double gaussianSigma = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gaussianSigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gaussiansigma_)));
          set_has_gaussiansigma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_generateMap;
        break;
      }
      
      // required bool generateMap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generateMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generatemap_)));
          set_has_generatemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_initialBeamSkip;
        break;
      }
      
      // required uint32 initialBeamSkip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialBeamSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initialbeamskip_)));
          set_has_initialbeamskip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_kernelSize;
        break;
      }
      
      // required int32 kernelSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernelSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernelsize_)));
          set_has_kernelsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_lasamplerange;
        break;
      }
      
      // required double lasamplerange = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lasamplerange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasamplerange_)));
          set_has_lasamplerange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_lasamplestep;
        break;
      }
      
      // required double lasamplestep = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lasamplestep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasamplestep_)));
          set_has_lasamplestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_laserAngles;
        break;
      }
      
      // repeated double laserAngles = 12 [packed = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laserAngles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_laserangles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98, input, this->mutable_laserangles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_laserBeams;
        break;
      }
      
      // required uint32 laserBeams = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laserBeams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laserbeams_)));
          set_has_laserbeams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_laserMaxRange;
        break;
      }
      
      // required double laserMaxRange = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_laserMaxRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasermaxrange_)));
          set_has_lasermaxrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_laserPose;
        break;
      }
      
      // required .gmapping_structs.OrientedPoint laserPose = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laserPose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laserpose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_likelihoodSigma;
        break;
      }
      
      // required double likelihoodSigma = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_likelihoodSigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &likelihoodsigma_)));
          set_has_likelihoodsigma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_likelihoodSkip;
        break;
      }
      
      // required uint32 likelihoodSkip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_likelihoodSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likelihoodskip_)));
          set_has_likelihoodskip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_linearOdometryReliability;
        break;
      }
      
      // required double linearOdometryReliability = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_linearOdometryReliability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linearodometryreliability_)));
          set_has_linearodometryreliability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_llsamplerange;
        break;
      }
      
      // required double llsamplerange = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_llsamplerange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &llsamplerange_)));
          set_has_llsamplerange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_llsamplestep;
        break;
      }
      
      // required double llsamplestep = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_llsamplestep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &llsamplestep_)));
          set_has_llsamplestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_optAngularDelta;
        break;
      }
      
      // required double optAngularDelta = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_optAngularDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optangulardelta_)));
          set_has_optangulardelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_optLinearDelta;
        break;
      }
      
      // required double optLinearDelta = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_optLinearDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optlineardelta_)));
          set_has_optlineardelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_optRecursiveIterations;
        break;
      }
      
      // required uint32 optRecursiveIterations = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optRecursiveIterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optrecursiveiterations_)));
          set_has_optrecursiveiterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_usableRange;
        break;
      }
      
      // required double usableRange = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usableRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usablerange_)));
          set_has_usablerange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanMatcherSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool activeAreaComputed = 1;
  if (has_activeareacomputed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->activeareacomputed(), output);
  }
  
  // required double angularOdometryReliability = 2;
  if (has_angularodometryreliability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angularodometryreliability(), output);
  }
  
  // required double enlargeStep = 3;
  if (has_enlargestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->enlargestep(), output);
  }
  
  // required double freeCellRatio = 4;
  if (has_freecellratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->freecellratio(), output);
  }
  
  // required double fullnessThreshold = 5;
  if (has_fullnessthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fullnessthreshold(), output);
  }
  
  // required double gaussianSigma = 6;
  if (has_gaussiansigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gaussiansigma(), output);
  }
  
  // required bool generateMap = 7;
  if (has_generatemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->generatemap(), output);
  }
  
  // required uint32 initialBeamSkip = 8;
  if (has_initialbeamskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->initialbeamskip(), output);
  }
  
  // required int32 kernelSize = 9;
  if (has_kernelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kernelsize(), output);
  }
  
  // required double lasamplerange = 10;
  if (has_lasamplerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lasamplerange(), output);
  }
  
  // required double lasamplestep = 11;
  if (has_lasamplestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lasamplestep(), output);
  }
  
  // repeated double laserAngles = 12 [packed = true];
  if (this->laserangles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_laserangles_cached_byte_size_);
  }
  for (int i = 0; i < this->laserangles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->laserangles(i), output);
  }
  
  // required uint32 laserBeams = 13;
  if (has_laserbeams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->laserbeams(), output);
  }
  
  // required double laserMaxRange = 14;
  if (has_lasermaxrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->lasermaxrange(), output);
  }
  
  // required .gmapping_structs.OrientedPoint laserPose = 15;
  if (has_laserpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->laserpose(), output);
  }
  
  // required double likelihoodSigma = 16;
  if (has_likelihoodsigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->likelihoodsigma(), output);
  }
  
  // required uint32 likelihoodSkip = 17;
  if (has_likelihoodskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->likelihoodskip(), output);
  }
  
  // required double linearOdometryReliability = 18;
  if (has_linearodometryreliability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->linearodometryreliability(), output);
  }
  
  // required double llsamplerange = 19;
  if (has_llsamplerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->llsamplerange(), output);
  }
  
  // required double llsamplestep = 20;
  if (has_llsamplestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->llsamplestep(), output);
  }
  
  // required double optAngularDelta = 21;
  if (has_optangulardelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->optangulardelta(), output);
  }
  
  // required double optLinearDelta = 22;
  if (has_optlineardelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->optlineardelta(), output);
  }
  
  // required uint32 optRecursiveIterations = 23;
  if (has_optrecursiveiterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->optrecursiveiterations(), output);
  }
  
  // required double usableRange = 24;
  if (has_usablerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->usablerange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanMatcherSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool activeAreaComputed = 1;
  if (has_activeareacomputed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->activeareacomputed(), target);
  }
  
  // required double angularOdometryReliability = 2;
  if (has_angularodometryreliability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angularodometryreliability(), target);
  }
  
  // required double enlargeStep = 3;
  if (has_enlargestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->enlargestep(), target);
  }
  
  // required double freeCellRatio = 4;
  if (has_freecellratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->freecellratio(), target);
  }
  
  // required double fullnessThreshold = 5;
  if (has_fullnessthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fullnessthreshold(), target);
  }
  
  // required double gaussianSigma = 6;
  if (has_gaussiansigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gaussiansigma(), target);
  }
  
  // required bool generateMap = 7;
  if (has_generatemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->generatemap(), target);
  }
  
  // required uint32 initialBeamSkip = 8;
  if (has_initialbeamskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->initialbeamskip(), target);
  }
  
  // required int32 kernelSize = 9;
  if (has_kernelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kernelsize(), target);
  }
  
  // required double lasamplerange = 10;
  if (has_lasamplerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lasamplerange(), target);
  }
  
  // required double lasamplestep = 11;
  if (has_lasamplestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lasamplestep(), target);
  }
  
  // repeated double laserAngles = 12 [packed = true];
  if (this->laserangles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _laserangles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->laserangles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->laserangles(i), target);
  }
  
  // required uint32 laserBeams = 13;
  if (has_laserbeams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->laserbeams(), target);
  }
  
  // required double laserMaxRange = 14;
  if (has_lasermaxrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->lasermaxrange(), target);
  }
  
  // required .gmapping_structs.OrientedPoint laserPose = 15;
  if (has_laserpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->laserpose(), target);
  }
  
  // required double likelihoodSigma = 16;
  if (has_likelihoodsigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->likelihoodsigma(), target);
  }
  
  // required uint32 likelihoodSkip = 17;
  if (has_likelihoodskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->likelihoodskip(), target);
  }
  
  // required double linearOdometryReliability = 18;
  if (has_linearodometryreliability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->linearodometryreliability(), target);
  }
  
  // required double llsamplerange = 19;
  if (has_llsamplerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->llsamplerange(), target);
  }
  
  // required double llsamplestep = 20;
  if (has_llsamplestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->llsamplestep(), target);
  }
  
  // required double optAngularDelta = 21;
  if (has_optangulardelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->optangulardelta(), target);
  }
  
  // required double optLinearDelta = 22;
  if (has_optlineardelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->optlineardelta(), target);
  }
  
  // required uint32 optRecursiveIterations = 23;
  if (has_optrecursiveiterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->optrecursiveiterations(), target);
  }
  
  // required double usableRange = 24;
  if (has_usablerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->usablerange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanMatcherSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool activeAreaComputed = 1;
    if (has_activeareacomputed()) {
      total_size += 1 + 1;
    }
    
    // required double angularOdometryReliability = 2;
    if (has_angularodometryreliability()) {
      total_size += 1 + 8;
    }
    
    // required double enlargeStep = 3;
    if (has_enlargestep()) {
      total_size += 1 + 8;
    }
    
    // required double freeCellRatio = 4;
    if (has_freecellratio()) {
      total_size += 1 + 8;
    }
    
    // required double fullnessThreshold = 5;
    if (has_fullnessthreshold()) {
      total_size += 1 + 8;
    }
    
    // required double gaussianSigma = 6;
    if (has_gaussiansigma()) {
      total_size += 1 + 8;
    }
    
    // required bool generateMap = 7;
    if (has_generatemap()) {
      total_size += 1 + 1;
    }
    
    // required uint32 initialBeamSkip = 8;
    if (has_initialbeamskip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initialbeamskip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 kernelSize = 9;
    if (has_kernelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernelsize());
    }
    
    // required double lasamplerange = 10;
    if (has_lasamplerange()) {
      total_size += 1 + 8;
    }
    
    // required double lasamplestep = 11;
    if (has_lasamplestep()) {
      total_size += 1 + 8;
    }
    
    // required uint32 laserBeams = 13;
    if (has_laserbeams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->laserbeams());
    }
    
    // required double laserMaxRange = 14;
    if (has_lasermaxrange()) {
      total_size += 1 + 8;
    }
    
    // required .gmapping_structs.OrientedPoint laserPose = 15;
    if (has_laserpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laserpose());
    }
    
    // required double likelihoodSigma = 16;
    if (has_likelihoodsigma()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 likelihoodSkip = 17;
    if (has_likelihoodskip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likelihoodskip());
    }
    
    // required double linearOdometryReliability = 18;
    if (has_linearodometryreliability()) {
      total_size += 2 + 8;
    }
    
    // required double llsamplerange = 19;
    if (has_llsamplerange()) {
      total_size += 2 + 8;
    }
    
    // required double llsamplestep = 20;
    if (has_llsamplestep()) {
      total_size += 2 + 8;
    }
    
    // required double optAngularDelta = 21;
    if (has_optangulardelta()) {
      total_size += 2 + 8;
    }
    
    // required double optLinearDelta = 22;
    if (has_optlineardelta()) {
      total_size += 2 + 8;
    }
    
    // required uint32 optRecursiveIterations = 23;
    if (has_optrecursiveiterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optrecursiveiterations());
    }
    
    // required double usableRange = 24;
    if (has_usablerange()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated double laserAngles = 12 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->laserangles_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _laserangles_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanMatcherSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanMatcherSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanMatcherSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanMatcherSettings::MergeFrom(const ScanMatcherSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  laserangles_.MergeFrom(from.laserangles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeareacomputed()) {
      set_activeareacomputed(from.activeareacomputed());
    }
    if (from.has_angularodometryreliability()) {
      set_angularodometryreliability(from.angularodometryreliability());
    }
    if (from.has_enlargestep()) {
      set_enlargestep(from.enlargestep());
    }
    if (from.has_freecellratio()) {
      set_freecellratio(from.freecellratio());
    }
    if (from.has_fullnessthreshold()) {
      set_fullnessthreshold(from.fullnessthreshold());
    }
    if (from.has_gaussiansigma()) {
      set_gaussiansigma(from.gaussiansigma());
    }
    if (from.has_generatemap()) {
      set_generatemap(from.generatemap());
    }
    if (from.has_initialbeamskip()) {
      set_initialbeamskip(from.initialbeamskip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernelsize()) {
      set_kernelsize(from.kernelsize());
    }
    if (from.has_lasamplerange()) {
      set_lasamplerange(from.lasamplerange());
    }
    if (from.has_lasamplestep()) {
      set_lasamplestep(from.lasamplestep());
    }
    if (from.has_laserbeams()) {
      set_laserbeams(from.laserbeams());
    }
    if (from.has_lasermaxrange()) {
      set_lasermaxrange(from.lasermaxrange());
    }
    if (from.has_laserpose()) {
      mutable_laserpose()->::gmapping_structs::OrientedPoint::MergeFrom(from.laserpose());
    }
    if (from.has_likelihoodsigma()) {
      set_likelihoodsigma(from.likelihoodsigma());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_likelihoodskip()) {
      set_likelihoodskip(from.likelihoodskip());
    }
    if (from.has_linearodometryreliability()) {
      set_linearodometryreliability(from.linearodometryreliability());
    }
    if (from.has_llsamplerange()) {
      set_llsamplerange(from.llsamplerange());
    }
    if (from.has_llsamplestep()) {
      set_llsamplestep(from.llsamplestep());
    }
    if (from.has_optangulardelta()) {
      set_optangulardelta(from.optangulardelta());
    }
    if (from.has_optlineardelta()) {
      set_optlineardelta(from.optlineardelta());
    }
    if (from.has_optrecursiveiterations()) {
      set_optrecursiveiterations(from.optrecursiveiterations());
    }
    if (from.has_usablerange()) {
      set_usablerange(from.usablerange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanMatcherSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanMatcherSettings::CopyFrom(const ScanMatcherSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanMatcherSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00fff7ff) != 0x00fff7ff) return false;
  
  if (has_laserpose()) {
    if (!this->laserpose().IsInitialized()) return false;
  }
  return true;
}

void ScanMatcherSettings::Swap(ScanMatcherSettings* other) {
  if (other != this) {
    std::swap(activeareacomputed_, other->activeareacomputed_);
    std::swap(angularodometryreliability_, other->angularodometryreliability_);
    std::swap(enlargestep_, other->enlargestep_);
    std::swap(freecellratio_, other->freecellratio_);
    std::swap(fullnessthreshold_, other->fullnessthreshold_);
    std::swap(gaussiansigma_, other->gaussiansigma_);
    std::swap(generatemap_, other->generatemap_);
    std::swap(initialbeamskip_, other->initialbeamskip_);
    std::swap(kernelsize_, other->kernelsize_);
    std::swap(lasamplerange_, other->lasamplerange_);
    std::swap(lasamplestep_, other->lasamplestep_);
    laserangles_.Swap(&other->laserangles_);
    std::swap(laserbeams_, other->laserbeams_);
    std::swap(lasermaxrange_, other->lasermaxrange_);
    std::swap(laserpose_, other->laserpose_);
    std::swap(likelihoodsigma_, other->likelihoodsigma_);
    std::swap(likelihoodskip_, other->likelihoodskip_);
    std::swap(linearodometryreliability_, other->linearodometryreliability_);
    std::swap(llsamplerange_, other->llsamplerange_);
    std::swap(llsamplestep_, other->llsamplestep_);
    std::swap(optangulardelta_, other->optangulardelta_);
    std::swap(optlineardelta_, other->optlineardelta_);
    std::swap(optrecursiveiterations_, other->optrecursiveiterations_);
    std::swap(usablerange_, other->usablerange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanMatcherSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanMatcherSettings_descriptor_;
  metadata.reflection = ScanMatcherSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkResponse::kIdFieldNumber;
const int WorkResponse::kMActiveAreaFieldNumber;
const int WorkResponse::kWeightFieldNumber;
const int WorkResponse::kWeightSumFieldNumber;
const int WorkResponse::kPoseFieldNumber;
const int WorkResponse::kMinxFieldNumber;
const int WorkResponse::kMinyFieldNumber;
const int WorkResponse::kMaxxFieldNumber;
const int WorkResponse::kMaxyFieldNumber;
#endif  // !_MSC_VER

WorkResponse::WorkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkResponse::InitAsDefaultInstance() {
  pose_ = const_cast< ::gmapping_structs::OrientedPoint*>(&::gmapping_structs::OrientedPoint::default_instance());
}

WorkResponse::WorkResponse(const WorkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  weight_ = 0;
  weightsum_ = 0;
  pose_ = NULL;
  minx_ = 0;
  miny_ = 0;
  maxx_ = 0;
  maxy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkResponse::~WorkResponse() {
  SharedDtor();
}

void WorkResponse::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void WorkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkResponse_descriptor_;
}

const WorkResponse& WorkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

WorkResponse* WorkResponse::default_instance_ = NULL;

WorkResponse* WorkResponse::New() const {
  return new WorkResponse;
}

void WorkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    weight_ = 0;
    weightsum_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gmapping_structs::OrientedPoint::Clear();
    }
    minx_ = 0;
    miny_ = 0;
    maxx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxy_ = 0;
  }
  m_activearea_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_activeArea;
        break;
      }
      
      // repeated .gmapping_structs.IntPoint m_activeArea = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activeArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_activearea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_activeArea;
        if (input->ExpectTag(25)) goto parse_weight;
        break;
      }
      
      // optional double weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_weightSum;
        break;
      }
      
      // optional double weightSum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weightSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weightsum_)));
          set_has_weightsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }
      
      // optional .gmapping_structs.OrientedPoint pose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_minx;
        break;
      }
      
      // optional double minx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minx_)));
          set_has_minx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_miny;
        break;
      }
      
      // optional double miny = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_miny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &miny_)));
          set_has_miny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_maxx;
        break;
      }
      
      // optional double maxx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxx_)));
          set_has_maxx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_maxy;
        break;
      }
      
      // optional double maxy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxy_)));
          set_has_maxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .gmapping_structs.IntPoint m_activeArea = 2;
  for (int i = 0; i < this->m_activearea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_activearea(i), output);
  }
  
  // optional double weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }
  
  // optional double weightSum = 4;
  if (has_weightsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weightsum(), output);
  }
  
  // optional .gmapping_structs.OrientedPoint pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }
  
  // optional double minx = 6;
  if (has_minx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->minx(), output);
  }
  
  // optional double miny = 7;
  if (has_miny()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->miny(), output);
  }
  
  // optional double maxx = 8;
  if (has_maxx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->maxx(), output);
  }
  
  // optional double maxy = 9;
  if (has_maxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->maxy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .gmapping_structs.IntPoint m_activeArea = 2;
  for (int i = 0; i < this->m_activearea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_activearea(i), target);
  }
  
  // optional double weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }
  
  // optional double weightSum = 4;
  if (has_weightsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weightsum(), target);
  }
  
  // optional .gmapping_structs.OrientedPoint pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }
  
  // optional double minx = 6;
  if (has_minx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->minx(), target);
  }
  
  // optional double miny = 7;
  if (has_miny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->miny(), target);
  }
  
  // optional double maxx = 8;
  if (has_maxx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->maxx(), target);
  }
  
  // optional double maxy = 9;
  if (has_maxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->maxy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double weight = 3;
    if (has_weight()) {
      total_size += 1 + 8;
    }
    
    // optional double weightSum = 4;
    if (has_weightsum()) {
      total_size += 1 + 8;
    }
    
    // optional .gmapping_structs.OrientedPoint pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // optional double minx = 6;
    if (has_minx()) {
      total_size += 1 + 8;
    }
    
    // optional double miny = 7;
    if (has_miny()) {
      total_size += 1 + 8;
    }
    
    // optional double maxx = 8;
    if (has_maxx()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double maxy = 9;
    if (has_maxy()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .gmapping_structs.IntPoint m_activeArea = 2;
  total_size += 1 * this->m_activearea_size();
  for (int i = 0; i < this->m_activearea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_activearea(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkResponse::MergeFrom(const WorkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_activearea_.MergeFrom(from.m_activearea_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_weightsum()) {
      set_weightsum(from.weightsum());
    }
    if (from.has_pose()) {
      mutable_pose()->::gmapping_structs::OrientedPoint::MergeFrom(from.pose());
    }
    if (from.has_minx()) {
      set_minx(from.minx());
    }
    if (from.has_miny()) {
      set_miny(from.miny());
    }
    if (from.has_maxx()) {
      set_maxx(from.maxx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxy()) {
      set_maxy(from.maxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkResponse::CopyFrom(const WorkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_activearea_size(); i++) {
    if (!this->m_activearea(i).IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void WorkResponse::Swap(WorkResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    m_activearea_.Swap(&other->m_activearea_);
    std::swap(weight_, other->weight_);
    std::swap(weightsum_, other->weightsum_);
    std::swap(pose_, other->pose_);
    std::swap(minx_, other->minx_);
    std::swap(miny_, other->miny_);
    std::swap(maxx_, other->maxx_);
    std::swap(maxy_, other->maxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkResponse_descriptor_;
  metadata.reflection = WorkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitialMaps::kParticlesFieldNumber;
const int InitialMaps::kIdsFieldNumber;
#endif  // !_MSC_VER

InitialMaps::InitialMaps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitialMaps::InitAsDefaultInstance() {
}

InitialMaps::InitialMaps(const InitialMaps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitialMaps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitialMaps::~InitialMaps() {
  SharedDtor();
}

void InitialMaps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitialMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialMaps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitialMaps_descriptor_;
}

const InitialMaps& InitialMaps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

InitialMaps* InitialMaps::default_instance_ = NULL;

InitialMaps* InitialMaps::New() const {
  return new InitialMaps;
}

void InitialMaps::Clear() {
  particles_.Clear();
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitialMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gmapping_structs.Particle particles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_particles;
        if (input->ExpectTag(18)) goto parse_ids;
        break;
      }
      
      // repeated int32 ids = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitialMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gmapping_structs.Particle particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->particles(i), output);
  }
  
  // repeated int32 ids = 2 [packed = true];
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitialMaps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gmapping_structs.Particle particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->particles(i), target);
  }
  
  // repeated int32 ids = 2 [packed = true];
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitialMaps::ByteSize() const {
  int total_size = 0;
  
  // repeated .gmapping_structs.Particle particles = 1;
  total_size += 1 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }
  
  // repeated int32 ids = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _ids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialMaps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitialMaps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitialMaps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitialMaps::MergeFrom(const InitialMaps& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitialMaps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialMaps::CopyFrom(const InitialMaps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialMaps::IsInitialized() const {
  
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  return true;
}

void InitialMaps::Swap(InitialMaps* other) {
  if (other != this) {
    particles_.Swap(&other->particles_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitialMaps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitialMaps_descriptor_;
  metadata.reflection = InitialMaps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Particle::kIdFieldNumber;
const int Particle::kWeightSumFieldNumber;
const int Particle::kWeightFieldNumber;
const int Particle::kSmapFieldNumber;
const int Particle::kPoseFieldNumber;
#endif  // !_MSC_VER

Particle::Particle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Particle::InitAsDefaultInstance() {
  smap_ = const_cast< ::gmapping_structs::ScanMatcherMap*>(&::gmapping_structs::ScanMatcherMap::default_instance());
  pose_ = const_cast< ::gmapping_structs::OrientedPoint*>(&::gmapping_structs::OrientedPoint::default_instance());
}

Particle::Particle(const Particle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Particle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  weightsum_ = 0;
  weight_ = 0;
  smap_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Particle::~Particle() {
  SharedDtor();
}

void Particle::SharedDtor() {
  if (this != default_instance_) {
    delete smap_;
    delete pose_;
  }
}

void Particle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Particle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particle_descriptor_;
}

const Particle& Particle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Particle* Particle::default_instance_ = NULL;

Particle* Particle::New() const {
  return new Particle;
}

void Particle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    weightsum_ = 0;
    weight_ = 0;
    if (has_smap()) {
      if (smap_ != NULL) smap_->::gmapping_structs::ScanMatcherMap::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gmapping_structs::OrientedPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Particle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_weightSum;
        break;
      }
      
      // required double weightSum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weightSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weightsum_)));
          set_has_weightsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_weight;
        break;
      }
      
      // required double weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_smap;
        break;
      }
      
      // required .gmapping_structs.ScanMatcherMap smap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }
      
      // required .gmapping_structs.OrientedPoint pose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Particle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required double weightSum = 2;
  if (has_weightsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weightsum(), output);
  }
  
  // required double weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }
  
  // required .gmapping_structs.ScanMatcherMap smap = 4;
  if (has_smap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->smap(), output);
  }
  
  // required .gmapping_structs.OrientedPoint pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Particle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required double weightSum = 2;
  if (has_weightsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weightsum(), target);
  }
  
  // required double weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }
  
  // required .gmapping_structs.ScanMatcherMap smap = 4;
  if (has_smap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->smap(), target);
  }
  
  // required .gmapping_structs.OrientedPoint pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Particle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required double weightSum = 2;
    if (has_weightsum()) {
      total_size += 1 + 8;
    }
    
    // required double weight = 3;
    if (has_weight()) {
      total_size += 1 + 8;
    }
    
    // required .gmapping_structs.ScanMatcherMap smap = 4;
    if (has_smap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smap());
    }
    
    // required .gmapping_structs.OrientedPoint pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Particle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Particle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Particle::MergeFrom(const Particle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weightsum()) {
      set_weightsum(from.weightsum());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_smap()) {
      mutable_smap()->::gmapping_structs::ScanMatcherMap::MergeFrom(from.smap());
    }
    if (from.has_pose()) {
      mutable_pose()->::gmapping_structs::OrientedPoint::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Particle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Particle::CopyFrom(const Particle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_smap()) {
    if (!this->smap().IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Particle::Swap(Particle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weightsum_, other->weightsum_);
    std::swap(weight_, other->weight_);
    std::swap(smap_, other->smap_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Particle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Particle_descriptor_;
  metadata.reflection = Particle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanMatcherMap::kMCenterXFieldNumber;
const int ScanMatcherMap::kMCenterYFieldNumber;
const int ScanMatcherMap::kMWorldSizeXFieldNumber;
const int ScanMatcherMap::kMWorldSizeYFieldNumber;
const int ScanMatcherMap::kMDeltaFieldNumber;
const int ScanMatcherMap::kMMapSizeXFieldNumber;
const int ScanMatcherMap::kMMapSizeYFieldNumber;
const int ScanMatcherMap::kMSizeX2FieldNumber;
const int ScanMatcherMap::kMSizeY2FieldNumber;
const int ScanMatcherMap::kMStorageFieldNumber;
#endif  // !_MSC_VER

ScanMatcherMap::ScanMatcherMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanMatcherMap::InitAsDefaultInstance() {
  m_storage_ = const_cast< ::gmapping_structs::HierarchicalArray2D*>(&::gmapping_structs::HierarchicalArray2D::default_instance());
}

ScanMatcherMap::ScanMatcherMap(const ScanMatcherMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanMatcherMap::SharedCtor() {
  _cached_size_ = 0;
  m_center_x_ = 0;
  m_center_y_ = 0;
  m_worldsizex_ = 0;
  m_worldsizey_ = 0;
  m_delta_ = 0;
  m_mapsizex_ = 0;
  m_mapsizey_ = 0;
  m_sizex2_ = 0;
  m_sizey2_ = 0;
  m_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanMatcherMap::~ScanMatcherMap() {
  SharedDtor();
}

void ScanMatcherMap::SharedDtor() {
  if (this != default_instance_) {
    delete m_storage_;
  }
}

void ScanMatcherMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanMatcherMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanMatcherMap_descriptor_;
}

const ScanMatcherMap& ScanMatcherMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

ScanMatcherMap* ScanMatcherMap::default_instance_ = NULL;

ScanMatcherMap* ScanMatcherMap::New() const {
  return new ScanMatcherMap;
}

void ScanMatcherMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_center_x_ = 0;
    m_center_y_ = 0;
    m_worldsizex_ = 0;
    m_worldsizey_ = 0;
    m_delta_ = 0;
    m_mapsizex_ = 0;
    m_mapsizey_ = 0;
    m_sizex2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_sizey2_ = 0;
    if (has_m_storage()) {
      if (m_storage_ != NULL) m_storage_->::gmapping_structs::HierarchicalArray2D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanMatcherMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double m_center_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_center_x_)));
          set_has_m_center_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_m_center_y;
        break;
      }
      
      // required double m_center_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_center_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_center_y_)));
          set_has_m_center_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_m_worldSizeX;
        break;
      }
      
      // required double m_worldSizeX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_worldSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_worldsizex_)));
          set_has_m_worldsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_m_worldSizeY;
        break;
      }
      
      // required double m_worldSizeY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_worldSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_worldsizey_)));
          set_has_m_worldsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_m_delta;
        break;
      }
      
      // required double m_delta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_delta_)));
          set_has_m_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_mapSizeX;
        break;
      }
      
      // required int32 m_mapSizeX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapsizex_)));
          set_has_m_mapsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_mapSizeY;
        break;
      }
      
      // required int32 m_mapSizeY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapsizey_)));
          set_has_m_mapsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_sizeX2;
        break;
      }
      
      // required int32 m_sizeX2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sizeX2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sizex2_)));
          set_has_m_sizex2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_sizeY2;
        break;
      }
      
      // required int32 m_sizeY2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sizeY2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sizey2_)));
          set_has_m_sizey2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_storage;
        break;
      }
      
      // required .gmapping_structs.HierarchicalArray2D m_storage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanMatcherMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double m_center_x = 1;
  if (has_m_center_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->m_center_x(), output);
  }
  
  // required double m_center_y = 2;
  if (has_m_center_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->m_center_y(), output);
  }
  
  // required double m_worldSizeX = 3;
  if (has_m_worldsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->m_worldsizex(), output);
  }
  
  // required double m_worldSizeY = 4;
  if (has_m_worldsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->m_worldsizey(), output);
  }
  
  // required double m_delta = 5;
  if (has_m_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->m_delta(), output);
  }
  
  // required int32 m_mapSizeX = 6;
  if (has_m_mapsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_mapsizex(), output);
  }
  
  // required int32 m_mapSizeY = 7;
  if (has_m_mapsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_mapsizey(), output);
  }
  
  // required int32 m_sizeX2 = 8;
  if (has_m_sizex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_sizex2(), output);
  }
  
  // required int32 m_sizeY2 = 9;
  if (has_m_sizey2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_sizey2(), output);
  }
  
  // required .gmapping_structs.HierarchicalArray2D m_storage = 10;
  if (has_m_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_storage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanMatcherMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double m_center_x = 1;
  if (has_m_center_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->m_center_x(), target);
  }
  
  // required double m_center_y = 2;
  if (has_m_center_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->m_center_y(), target);
  }
  
  // required double m_worldSizeX = 3;
  if (has_m_worldsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->m_worldsizex(), target);
  }
  
  // required double m_worldSizeY = 4;
  if (has_m_worldsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->m_worldsizey(), target);
  }
  
  // required double m_delta = 5;
  if (has_m_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->m_delta(), target);
  }
  
  // required int32 m_mapSizeX = 6;
  if (has_m_mapsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_mapsizex(), target);
  }
  
  // required int32 m_mapSizeY = 7;
  if (has_m_mapsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_mapsizey(), target);
  }
  
  // required int32 m_sizeX2 = 8;
  if (has_m_sizex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_sizex2(), target);
  }
  
  // required int32 m_sizeY2 = 9;
  if (has_m_sizey2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_sizey2(), target);
  }
  
  // required .gmapping_structs.HierarchicalArray2D m_storage = 10;
  if (has_m_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_storage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanMatcherMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double m_center_x = 1;
    if (has_m_center_x()) {
      total_size += 1 + 8;
    }
    
    // required double m_center_y = 2;
    if (has_m_center_y()) {
      total_size += 1 + 8;
    }
    
    // required double m_worldSizeX = 3;
    if (has_m_worldsizex()) {
      total_size += 1 + 8;
    }
    
    // required double m_worldSizeY = 4;
    if (has_m_worldsizey()) {
      total_size += 1 + 8;
    }
    
    // required double m_delta = 5;
    if (has_m_delta()) {
      total_size += 1 + 8;
    }
    
    // required int32 m_mapSizeX = 6;
    if (has_m_mapsizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapsizex());
    }
    
    // required int32 m_mapSizeY = 7;
    if (has_m_mapsizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapsizey());
    }
    
    // required int32 m_sizeX2 = 8;
    if (has_m_sizex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sizex2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_sizeY2 = 9;
    if (has_m_sizey2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sizey2());
    }
    
    // required .gmapping_structs.HierarchicalArray2D m_storage = 10;
    if (has_m_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_storage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanMatcherMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanMatcherMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanMatcherMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanMatcherMap::MergeFrom(const ScanMatcherMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_center_x()) {
      set_m_center_x(from.m_center_x());
    }
    if (from.has_m_center_y()) {
      set_m_center_y(from.m_center_y());
    }
    if (from.has_m_worldsizex()) {
      set_m_worldsizex(from.m_worldsizex());
    }
    if (from.has_m_worldsizey()) {
      set_m_worldsizey(from.m_worldsizey());
    }
    if (from.has_m_delta()) {
      set_m_delta(from.m_delta());
    }
    if (from.has_m_mapsizex()) {
      set_m_mapsizex(from.m_mapsizex());
    }
    if (from.has_m_mapsizey()) {
      set_m_mapsizey(from.m_mapsizey());
    }
    if (from.has_m_sizex2()) {
      set_m_sizex2(from.m_sizex2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_sizey2()) {
      set_m_sizey2(from.m_sizey2());
    }
    if (from.has_m_storage()) {
      mutable_m_storage()->::gmapping_structs::HierarchicalArray2D::MergeFrom(from.m_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanMatcherMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanMatcherMap::CopyFrom(const ScanMatcherMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanMatcherMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  if (has_m_storage()) {
    if (!this->m_storage().IsInitialized()) return false;
  }
  return true;
}

void ScanMatcherMap::Swap(ScanMatcherMap* other) {
  if (other != this) {
    std::swap(m_center_x_, other->m_center_x_);
    std::swap(m_center_y_, other->m_center_y_);
    std::swap(m_worldsizex_, other->m_worldsizex_);
    std::swap(m_worldsizey_, other->m_worldsizey_);
    std::swap(m_delta_, other->m_delta_);
    std::swap(m_mapsizex_, other->m_mapsizex_);
    std::swap(m_mapsizey_, other->m_mapsizey_);
    std::swap(m_sizex2_, other->m_sizex2_);
    std::swap(m_sizey2_, other->m_sizey2_);
    std::swap(m_storage_, other->m_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanMatcherMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanMatcherMap_descriptor_;
  metadata.reflection = ScanMatcherMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrientedPoint::kXFieldNumber;
const int OrientedPoint::kYFieldNumber;
const int OrientedPoint::kThetaFieldNumber;
#endif  // !_MSC_VER

OrientedPoint::OrientedPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrientedPoint::InitAsDefaultInstance() {
}

OrientedPoint::OrientedPoint(const OrientedPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrientedPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  theta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrientedPoint::~OrientedPoint() {
  SharedDtor();
}

void OrientedPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrientedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrientedPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrientedPoint_descriptor_;
}

const OrientedPoint& OrientedPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

OrientedPoint* OrientedPoint::default_instance_ = NULL;

OrientedPoint* OrientedPoint::New() const {
  return new OrientedPoint;
}

void OrientedPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    theta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrientedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_theta;
        break;
      }
      
      // required double theta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrientedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double theta = 3;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrientedPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double theta = 3;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrientedPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrientedPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrientedPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrientedPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrientedPoint::MergeFrom(const OrientedPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrientedPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrientedPoint::CopyFrom(const OrientedPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrientedPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void OrientedPoint::Swap(OrientedPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(theta_, other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrientedPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrientedPoint_descriptor_;
  metadata.reflection = OrientedPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointAccumulator::kXFieldNumber;
const int PointAccumulator::kYFieldNumber;
const int PointAccumulator::kNFieldNumber;
const int PointAccumulator::kVisitsFieldNumber;
#endif  // !_MSC_VER

PointAccumulator::PointAccumulator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointAccumulator::InitAsDefaultInstance() {
}

PointAccumulator::PointAccumulator(const PointAccumulator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointAccumulator::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  n_ = 0;
  visits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointAccumulator::~PointAccumulator() {
  SharedDtor();
}

void PointAccumulator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointAccumulator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointAccumulator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointAccumulator_descriptor_;
}

const PointAccumulator& PointAccumulator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

PointAccumulator* PointAccumulator::default_instance_ = NULL;

PointAccumulator* PointAccumulator::New() const {
  return new PointAccumulator;
}

void PointAccumulator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    n_ = 0;
    visits_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointAccumulator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_n;
        break;
      }
      
      // required int32 n = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_visits;
        break;
      }
      
      // required int32 visits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visits_)));
          set_has_visits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointAccumulator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required int32 n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->n(), output);
  }
  
  // required int32 visits = 4;
  if (has_visits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->visits(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointAccumulator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required int32 n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->n(), target);
  }
  
  // required int32 visits = 4;
  if (has_visits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->visits(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointAccumulator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required int32 n = 3;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n());
    }
    
    // required int32 visits = 4;
    if (has_visits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visits());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointAccumulator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointAccumulator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointAccumulator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointAccumulator::MergeFrom(const PointAccumulator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_visits()) {
      set_visits(from.visits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointAccumulator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointAccumulator::CopyFrom(const PointAccumulator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointAccumulator::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PointAccumulator::Swap(PointAccumulator* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(n_, other->n_);
    std::swap(visits_, other->visits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointAccumulator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointAccumulator_descriptor_;
  metadata.reflection = PointAccumulator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2D_innerType::kYFieldNumber;
#endif  // !_MSC_VER

Array2D_innerType::Array2D_innerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Array2D_innerType::InitAsDefaultInstance() {
}

Array2D_innerType::Array2D_innerType(const Array2D_innerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Array2D_innerType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2D_innerType::~Array2D_innerType() {
  SharedDtor();
}

void Array2D_innerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2D_innerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2D_innerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2D_innerType_descriptor_;
}

const Array2D_innerType& Array2D_innerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Array2D_innerType* Array2D_innerType::default_instance_ = NULL;

Array2D_innerType* Array2D_innerType::New() const {
  return new Array2D_innerType;
}

void Array2D_innerType::Clear() {
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2D_innerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gmapping_structs.PointAccumulator y = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_y;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Array2D_innerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gmapping_structs.PointAccumulator y = 1;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->y(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Array2D_innerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gmapping_structs.PointAccumulator y = 1;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->y(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Array2D_innerType::ByteSize() const {
  int total_size = 0;
  
  // repeated .gmapping_structs.PointAccumulator y = 1;
  total_size += 1 * this->y_size();
  for (int i = 0; i < this->y_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->y(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2D_innerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2D_innerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2D_innerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2D_innerType::MergeFrom(const Array2D_innerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  y_.MergeFrom(from.y_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2D_innerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2D_innerType::CopyFrom(const Array2D_innerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2D_innerType::IsInitialized() const {
  
  for (int i = 0; i < y_size(); i++) {
    if (!this->y(i).IsInitialized()) return false;
  }
  return true;
}

void Array2D_innerType::Swap(Array2D_innerType* other) {
  if (other != this) {
    y_.Swap(&other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2D_innerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2D_innerType_descriptor_;
  metadata.reflection = Array2D_innerType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Array2D::kMXsizeFieldNumber;
const int Array2D::kMYsizeFieldNumber;
const int Array2D::kXFieldNumber;
#endif  // !_MSC_VER

Array2D::Array2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Array2D::InitAsDefaultInstance() {
}

Array2D::Array2D(const Array2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Array2D::SharedCtor() {
  _cached_size_ = 0;
  m_xsize_ = 0;
  m_ysize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2D::~Array2D() {
  SharedDtor();
}

void Array2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2D_descriptor_;
}

const Array2D& Array2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Array2D* Array2D::default_instance_ = NULL;

Array2D* Array2D::New() const {
  return new Array2D;
}

void Array2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_xsize_ = 0;
    m_ysize_ = 0;
  }
  x_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_xsize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xsize_)));
          set_has_m_xsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ysize;
        break;
      }
      
      // required int32 m_ysize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ysize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ysize_)));
          set_has_m_ysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_x;
        break;
      }
      
      // repeated .gmapping_structs.Array2D.innerType x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_x;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Array2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_xsize = 1;
  if (has_m_xsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_xsize(), output);
  }
  
  // required int32 m_ysize = 2;
  if (has_m_ysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ysize(), output);
  }
  
  // repeated .gmapping_structs.Array2D.innerType x = 4;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->x(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Array2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_xsize = 1;
  if (has_m_xsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_xsize(), target);
  }
  
  // required int32 m_ysize = 2;
  if (has_m_ysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ysize(), target);
  }
  
  // repeated .gmapping_structs.Array2D.innerType x = 4;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->x(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Array2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_xsize = 1;
    if (has_m_xsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xsize());
    }
    
    // required int32 m_ysize = 2;
    if (has_m_ysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ysize());
    }
    
  }
  // repeated .gmapping_structs.Array2D.innerType x = 4;
  total_size += 1 * this->x_size();
  for (int i = 0; i < this->x_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->x(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2D::MergeFrom(const Array2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_xsize()) {
      set_m_xsize(from.m_xsize());
    }
    if (from.has_m_ysize()) {
      set_m_ysize(from.m_ysize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2D::CopyFrom(const Array2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < x_size(); i++) {
    if (!this->x(i).IsInitialized()) return false;
  }
  return true;
}

void Array2D::Swap(Array2D* other) {
  if (other != this) {
    std::swap(m_xsize_, other->m_xsize_);
    std::swap(m_ysize_, other->m_ysize_);
    x_.Swap(&other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2D_descriptor_;
  metadata.reflection = Array2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Autoptr::kDataFieldNumber;
#endif  // !_MSC_VER

Autoptr::Autoptr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Autoptr::InitAsDefaultInstance() {
  data_ = const_cast< ::gmapping_structs::Array2D*>(&::gmapping_structs::Array2D::default_instance());
}

Autoptr::Autoptr(const Autoptr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Autoptr::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Autoptr::~Autoptr() {
  SharedDtor();
}

void Autoptr::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Autoptr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Autoptr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Autoptr_descriptor_;
}

const Autoptr& Autoptr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Autoptr* Autoptr::default_instance_ = NULL;

Autoptr* Autoptr::New() const {
  return new Autoptr;
}

void Autoptr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::gmapping_structs::Array2D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Autoptr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gmapping_structs.Array2D data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Autoptr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gmapping_structs.Array2D data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Autoptr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gmapping_structs.Array2D data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Autoptr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gmapping_structs.Array2D data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Autoptr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Autoptr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Autoptr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Autoptr::MergeFrom(const Autoptr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::gmapping_structs::Array2D::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Autoptr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Autoptr::CopyFrom(const Autoptr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Autoptr::IsInitialized() const {
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Autoptr::Swap(Autoptr* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Autoptr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Autoptr_descriptor_;
  metadata.reflection = Autoptr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HierarchicalArray2D_innerType::kMCellsYFieldNumber;
#endif  // !_MSC_VER

HierarchicalArray2D_innerType::HierarchicalArray2D_innerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HierarchicalArray2D_innerType::InitAsDefaultInstance() {
}

HierarchicalArray2D_innerType::HierarchicalArray2D_innerType(const HierarchicalArray2D_innerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HierarchicalArray2D_innerType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HierarchicalArray2D_innerType::~HierarchicalArray2D_innerType() {
  SharedDtor();
}

void HierarchicalArray2D_innerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HierarchicalArray2D_innerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HierarchicalArray2D_innerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchicalArray2D_innerType_descriptor_;
}

const HierarchicalArray2D_innerType& HierarchicalArray2D_innerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

HierarchicalArray2D_innerType* HierarchicalArray2D_innerType::default_instance_ = NULL;

HierarchicalArray2D_innerType* HierarchicalArray2D_innerType::New() const {
  return new HierarchicalArray2D_innerType;
}

void HierarchicalArray2D_innerType::Clear() {
  m_cells_y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HierarchicalArray2D_innerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gmapping_structs.Autoptr m_cells_y = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cells_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_cells_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_cells_y;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HierarchicalArray2D_innerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gmapping_structs.Autoptr m_cells_y = 1;
  for (int i = 0; i < this->m_cells_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_cells_y(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HierarchicalArray2D_innerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gmapping_structs.Autoptr m_cells_y = 1;
  for (int i = 0; i < this->m_cells_y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_cells_y(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HierarchicalArray2D_innerType::ByteSize() const {
  int total_size = 0;
  
  // repeated .gmapping_structs.Autoptr m_cells_y = 1;
  total_size += 1 * this->m_cells_y_size();
  for (int i = 0; i < this->m_cells_y_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_cells_y(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HierarchicalArray2D_innerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HierarchicalArray2D_innerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HierarchicalArray2D_innerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HierarchicalArray2D_innerType::MergeFrom(const HierarchicalArray2D_innerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_cells_y_.MergeFrom(from.m_cells_y_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HierarchicalArray2D_innerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchicalArray2D_innerType::CopyFrom(const HierarchicalArray2D_innerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalArray2D_innerType::IsInitialized() const {
  
  for (int i = 0; i < m_cells_y_size(); i++) {
    if (!this->m_cells_y(i).IsInitialized()) return false;
  }
  return true;
}

void HierarchicalArray2D_innerType::Swap(HierarchicalArray2D_innerType* other) {
  if (other != this) {
    m_cells_y_.Swap(&other->m_cells_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HierarchicalArray2D_innerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HierarchicalArray2D_innerType_descriptor_;
  metadata.reflection = HierarchicalArray2D_innerType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HierarchicalArray2D::kMPatchMagnitudeFieldNumber;
const int HierarchicalArray2D::kMPatchSizeFieldNumber;
const int HierarchicalArray2D::kMCellsXFieldNumber;
const int HierarchicalArray2D::kMXsizeFieldNumber;
const int HierarchicalArray2D::kMYsizeFieldNumber;
const int HierarchicalArray2D::kMActiveAreaFieldNumber;
#endif  // !_MSC_VER

HierarchicalArray2D::HierarchicalArray2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HierarchicalArray2D::InitAsDefaultInstance() {
}

HierarchicalArray2D::HierarchicalArray2D(const HierarchicalArray2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HierarchicalArray2D::SharedCtor() {
  _cached_size_ = 0;
  m_patchmagnitude_ = 0;
  m_patchsize_ = 0;
  m_xsize_ = 0;
  m_ysize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HierarchicalArray2D::~HierarchicalArray2D() {
  SharedDtor();
}

void HierarchicalArray2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HierarchicalArray2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HierarchicalArray2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchicalArray2D_descriptor_;
}

const HierarchicalArray2D& HierarchicalArray2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

HierarchicalArray2D* HierarchicalArray2D::default_instance_ = NULL;

HierarchicalArray2D* HierarchicalArray2D::New() const {
  return new HierarchicalArray2D;
}

void HierarchicalArray2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_patchmagnitude_ = 0;
    m_patchsize_ = 0;
    m_xsize_ = 0;
    m_ysize_ = 0;
  }
  m_cells_x_.Clear();
  m_activearea_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HierarchicalArray2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_patchMagnitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_patchmagnitude_)));
          set_has_m_patchmagnitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_patchSize;
        break;
      }
      
      // required int32 m_patchSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_patchSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_patchsize_)));
          set_has_m_patchsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_cells_x;
        break;
      }
      
      // repeated .gmapping_structs.HierarchicalArray2D.innerType m_cells_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cells_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_cells_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_cells_x;
        if (input->ExpectTag(32)) goto parse_m_xsize;
        break;
      }
      
      // required int32 m_xsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xsize_)));
          set_has_m_xsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_ysize;
        break;
      }
      
      // required int32 m_ysize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ysize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ysize_)));
          set_has_m_ysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_activeArea;
        break;
      }
      
      // repeated .gmapping_structs.IntPoint m_activeArea = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activeArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_activearea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_activeArea;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HierarchicalArray2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_patchMagnitude = 1;
  if (has_m_patchmagnitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_patchmagnitude(), output);
  }
  
  // required int32 m_patchSize = 2;
  if (has_m_patchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_patchsize(), output);
  }
  
  // repeated .gmapping_structs.HierarchicalArray2D.innerType m_cells_x = 3;
  for (int i = 0; i < this->m_cells_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_cells_x(i), output);
  }
  
  // required int32 m_xsize = 4;
  if (has_m_xsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_xsize(), output);
  }
  
  // required int32 m_ysize = 5;
  if (has_m_ysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ysize(), output);
  }
  
  // repeated .gmapping_structs.IntPoint m_activeArea = 6;
  for (int i = 0; i < this->m_activearea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_activearea(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HierarchicalArray2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_patchMagnitude = 1;
  if (has_m_patchmagnitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_patchmagnitude(), target);
  }
  
  // required int32 m_patchSize = 2;
  if (has_m_patchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_patchsize(), target);
  }
  
  // repeated .gmapping_structs.HierarchicalArray2D.innerType m_cells_x = 3;
  for (int i = 0; i < this->m_cells_x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_cells_x(i), target);
  }
  
  // required int32 m_xsize = 4;
  if (has_m_xsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_xsize(), target);
  }
  
  // required int32 m_ysize = 5;
  if (has_m_ysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ysize(), target);
  }
  
  // repeated .gmapping_structs.IntPoint m_activeArea = 6;
  for (int i = 0; i < this->m_activearea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_activearea(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HierarchicalArray2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_patchMagnitude = 1;
    if (has_m_patchmagnitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_patchmagnitude());
    }
    
    // required int32 m_patchSize = 2;
    if (has_m_patchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_patchsize());
    }
    
    // required int32 m_xsize = 4;
    if (has_m_xsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xsize());
    }
    
    // required int32 m_ysize = 5;
    if (has_m_ysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ysize());
    }
    
  }
  // repeated .gmapping_structs.HierarchicalArray2D.innerType m_cells_x = 3;
  total_size += 1 * this->m_cells_x_size();
  for (int i = 0; i < this->m_cells_x_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_cells_x(i));
  }
  
  // repeated .gmapping_structs.IntPoint m_activeArea = 6;
  total_size += 1 * this->m_activearea_size();
  for (int i = 0; i < this->m_activearea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_activearea(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HierarchicalArray2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HierarchicalArray2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HierarchicalArray2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HierarchicalArray2D::MergeFrom(const HierarchicalArray2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_cells_x_.MergeFrom(from.m_cells_x_);
  m_activearea_.MergeFrom(from.m_activearea_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_patchmagnitude()) {
      set_m_patchmagnitude(from.m_patchmagnitude());
    }
    if (from.has_m_patchsize()) {
      set_m_patchsize(from.m_patchsize());
    }
    if (from.has_m_xsize()) {
      set_m_xsize(from.m_xsize());
    }
    if (from.has_m_ysize()) {
      set_m_ysize(from.m_ysize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HierarchicalArray2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchicalArray2D::CopyFrom(const HierarchicalArray2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalArray2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  for (int i = 0; i < m_cells_x_size(); i++) {
    if (!this->m_cells_x(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_activearea_size(); i++) {
    if (!this->m_activearea(i).IsInitialized()) return false;
  }
  return true;
}

void HierarchicalArray2D::Swap(HierarchicalArray2D* other) {
  if (other != this) {
    std::swap(m_patchmagnitude_, other->m_patchmagnitude_);
    std::swap(m_patchsize_, other->m_patchsize_);
    m_cells_x_.Swap(&other->m_cells_x_);
    std::swap(m_xsize_, other->m_xsize_);
    std::swap(m_ysize_, other->m_ysize_);
    m_activearea_.Swap(&other->m_activearea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HierarchicalArray2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HierarchicalArray2D_descriptor_;
  metadata.reflection = HierarchicalArray2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntPoint::kXFieldNumber;
const int IntPoint::kYFieldNumber;
#endif  // !_MSC_VER

IntPoint::IntPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntPoint::InitAsDefaultInstance() {
}

IntPoint::IntPoint(const IntPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntPoint::~IntPoint() {
  SharedDtor();
}

void IntPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntPoint_descriptor_;
}

const IntPoint& IntPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

IntPoint* IntPoint::default_instance_ = NULL;

IntPoint* IntPoint::New() const {
  return new IntPoint;
}

void IntPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntPoint::MergeFrom(const IntPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntPoint::CopyFrom(const IntPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IntPoint::Swap(IntPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntPoint_descriptor_;
  metadata.reflection = IntPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int resampleMessage::kResamplecounterFieldNumber;
const int resampleMessage::kResampleindexesFieldNumber;
const int resampleMessage::kFinishFieldNumber;
#endif  // !_MSC_VER

resampleMessage::resampleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void resampleMessage::InitAsDefaultInstance() {
}

resampleMessage::resampleMessage(const resampleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void resampleMessage::SharedCtor() {
  _cached_size_ = 0;
  resamplecounter_ = 0u;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

resampleMessage::~resampleMessage() {
  SharedDtor();
}

void resampleMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void resampleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resampleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return resampleMessage_descriptor_;
}

const resampleMessage& resampleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

resampleMessage* resampleMessage::default_instance_ = NULL;

resampleMessage* resampleMessage::New() const {
  return new resampleMessage;
}

void resampleMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resamplecounter_ = 0u;
    finish_ = false;
  }
  resampleindexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool resampleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 resamplecounter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resamplecounter_)));
          set_has_resamplecounter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resampleindexes;
        break;
      }
      
      // repeated uint32 resampleindexes = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resampleindexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_resampleindexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_resampleindexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish;
        break;
      }
      
      // optional bool finish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void resampleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 resamplecounter = 1;
  if (has_resamplecounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resamplecounter(), output);
  }
  
  // repeated uint32 resampleindexes = 2 [packed = true];
  if (this->resampleindexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_resampleindexes_cached_byte_size_);
  }
  for (int i = 0; i < this->resampleindexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->resampleindexes(i), output);
  }
  
  // optional bool finish = 3;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* resampleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 resamplecounter = 1;
  if (has_resamplecounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resamplecounter(), target);
  }
  
  // repeated uint32 resampleindexes = 2 [packed = true];
  if (this->resampleindexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _resampleindexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->resampleindexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->resampleindexes(i), target);
  }
  
  // optional bool finish = 3;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int resampleMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 resamplecounter = 1;
    if (has_resamplecounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resamplecounter());
    }
    
    // optional bool finish = 3;
    if (has_finish()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated uint32 resampleindexes = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->resampleindexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->resampleindexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _resampleindexes_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resampleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const resampleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const resampleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void resampleMessage::MergeFrom(const resampleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  resampleindexes_.MergeFrom(from.resampleindexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resamplecounter()) {
      set_resamplecounter(from.resamplecounter());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void resampleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resampleMessage::CopyFrom(const resampleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resampleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void resampleMessage::Swap(resampleMessage* other) {
  if (other != this) {
    std::swap(resamplecounter_, other->resamplecounter_);
    resampleindexes_.Swap(&other->resampleindexes_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata resampleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = resampleMessage_descriptor_;
  metadata.reflection = resampleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Particles::kParticlesFieldNumber;
const int Particles::kIdFieldNumber;
#endif  // !_MSC_VER

Particles::Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Particles::InitAsDefaultInstance() {
}

Particles::Particles(const Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Particles::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Particles::~Particles() {
  SharedDtor();
}

void Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particles_descriptor_;
}

const Particles& Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fparticle_5freading_2eproto();  return *default_instance_;
}

Particles* Particles::default_instance_ = NULL;

Particles* Particles::New() const {
  return new Particles;
}

void Particles::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    id_ = 0u;
  }
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gmapping_structs.Particle particles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_particles;
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gmapping_structs.Particle particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->particles(i), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gmapping_structs.Particle particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->particles(i), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Particles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .gmapping_structs.Particle particles = 1;
  total_size += 1 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Particles::MergeFrom(const Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Particles::CopyFrom(const Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particles::IsInitialized() const {
  
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  return true;
}

void Particles::Swap(Particles* other) {
  if (other != this) {
    particles_.Swap(&other->particles_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Particles_descriptor_;
  metadata.reflection = Particles_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gmapping_structs

// @@protoc_insertion_point(global_scope)
